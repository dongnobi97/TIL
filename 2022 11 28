금일은 발표를 최종적으로 준비하기 위해서 발표 순서 및 영상을 촬영하였습니다.

1. 영상 

https://www.youtube.com/watch?v=Pm7ObuLF9Gc << 해당 영상 링크입니다.

2. 구성
- 은행 계좌에서 등록하기를 통해 실제 조원들의 계좌를 먼저 등록한 후
- 수정과 삭제버튼을 보여드리기 위해서 고객명과 계좌번호를 입력하면 수정과 삭제가 가능함을 보여드립니다.
- 입,출금시 시간과 날짜가 표기되는데 이를 위해 여러번 입,출금을 시행한 후 계좌목록에서 전체 거래내역을 조회합니다.
- 출금시에는 잔고보다 더 큰 금액을 출금 시도 시 "계좌를 확인해주세요" 라는 문구가 나오게 한다.

3. 해당 함수들
#  for (int i = 0; i < bankUsers.size(); i++) {

            if (account.equals(bankUsers.get(i).getAccountNum())) { // 입력값과 기존 계좌번호가 동일한지 판별
                money = getNumInput("입금액 입력 :");
                newBalance = Integer.parseInt(bankUsers.get(i).getBalance()) + money; // Integer.parseInt(String s) 문자열을 정수 값으로 변환 후
                // 입금 금액 더해 줌
                bankUsers.get(i).setTransactionDate(DateTimeFormatter.ofPattern("yyyy년MM월dd일 HH시mm분").format(LocalDateTime.now()));
                bankUsers.get(i).setMoney(money);
                bankUsers.get(i).setBalance(String.valueOf(newBalance)); // String.valueOf() 숫자 값을 문자열로 변환
                tradeDate = bankUsers.get(i).getTransactionDate();
                bankUsers.get(i).setTransactionDate(tradeDate);

                isDeposit = true;
                bankUsers.get(i).setIsDeposit(isDeposit);
                bankUsers.get(i).setIsWithdrawal(false);
                transactionHistory.add(new ClientManagement(bankUsers.get(i).getName(), bankUsers.get(i).getBankName(),
                        account, String.valueOf(newBalance), money, tradeDate, bankUsers.get(i).getIsDeposit(), bankUsers.get(i).getIsWithdrawal()));
                // bankUsers.get(i).transactionTime();
                System.out.println(money + "원이 입금되었습니다. 현재 잔액: " + bankUsers.get(i).getBalance() + "원 입금날짜 :" + bankUsers.get(i).getTransactionDate());

                break;
            } else {
                if (i < bankUsers.size() - 1) {
                    continue;
                } else {
                    System.out.println("계좌 번호를 확인하세요.");
                }
                
                
                
                #입,출금
                
                private void clientList() { // 계좌 목록
        Iterator<BankVO> ite = bankUsers.iterator();

        while (ite.hasNext()) {
            System.out.println(ite.next() + " ");
        }
    }

    private void accountDeposit() { // 예금
        sc.nextLine();
        String account = getStrInput("계좌 번호를 입력하세요. :");
        String tradeDate;
        int money = 0;      // 입금액
        int newBalance = 0; // 입금액이 더해질 새로운 잔고
        boolean isDeposit = false;
        boolean isAccountExist;
        
        #계좌 삭제
        
         private void Delete() { // 삭제
        sc.nextLine();
        String name = getStrInput("삭제할 이름 :");

        for (int i = 0; i < bankUsers.size(); i++) {
            if (name.equals(bankUsers.get(i).getName())) {
                bankUsers.remove(i);
                System.out.println("삭제되었습니다.");
            } else {
                System.out.println("정보와 맞지 않습니다.");
                
       #계좌 수정
                
                  private void Update() { // 수정
        if (bankUsers.isEmpty()) {
            System.out.println("고객명이 없습니다.");
            return;
        }
        System.out.println("수정하실 고객명을 입력해주세요.");
        Scanner scanner = new Scanner(System.in);

        String name = scanner.nextLine();

        for (int i = 0; i < bankUsers.size(); i++) {
            if (name.equals(bankUsers.get(i).getName())) {
                System.out.println("계좌번호를 입력해 주세요");
                String accountNum = scanner.nextLine();
                if (accountNum.equals(bankUsers.get(i).getAccountNum())) {
                    System.out.println("새로운 은행을 입력해 주세요");
                    String newBank = scanner.nextLine();
                    bankUsers.get(i).setBankName(newBank);
                    System.out.println("수정이 완료 되었습니다.");
                    return;
                } else {
                    System.out.println("계좌번호가 틀립니다.");
                }
