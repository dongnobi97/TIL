오늘은 이어서 알고리즘 강의를 계속들으며 공부하였습니다. 아직 시간복잡도와 공간복잡도의 개념이 잘 잡히지 않아 복습하며,
공부하였습니다.

1.  알고리즘을 배우는 이유

-특정 자료구조는 삽입/삭제가 빠르고
 특정 자료구조는 조회가 빠름

>>어떤 경우에는 저 자료구조가 좋은 것 처럼
경우에 따라 다양한 자료구조와 알고리즘을 사용해야 합

2. 어레이와 링크드 리스트

(1) 어레이: 특정 원소 조회가 가능하고, 데이터 추가 시 모든 공간이 다 차바렸다면 새로운
메모리 공간을 할당받아야함 , >> 결과적으로 데이터에 접근하는 경우가 빈번한 경우 array 사용

(2)링크드 리스트: 특정 원소 조회가 가능하며, 모든 공간이 다 찼어도 맨 뒤의 노드만 동적으로 추가하면 됨.
>> 삽입과 삭제가 빈번하다면 링크드 리스트를 사용하는것이 더 이득

#예시 

어레이

# 처음 상태
rooms = ["윤아", "수영", "티파니", "효연", "유리", "태연", "써니", "서현"]

# 1번 이동 -> 써니와 서현 변경
rooms = ["윤아", "수영", "티파니", "효연", "유리", "태연", "서현", "써니" ]

# 2번 이동 -> 태연과 서현 변경
rooms = ["윤아", "수영", "티파니", "효연", "유리", "서현", "태연", "써니" ]

# 3번 이동 -> 유리와 서현 변경
rooms = ["윤아", "수영", "티파니", "효연", "서현", "유리", "태연", "써니" ]

# 4번 이동 -> 효연과 서현 변경
rooms = ["윤아", "수영", "티파니", "서현", "효연", "유리", "태연", "써니" ]

# 5번 이동 -> 티파니와 서현 변경! 후! 드디어 도착!
rooms = ["윤아", "수영", "서현", "티파니", "효연", "유리", "태연", "써니" ]


링크드 리스트

# 처음 상태              내 위치
train_compartments = ["기관실"] -> ["시멘트"] -> ["자갈"] -> ["밀가루"] -> ["우편"]

# 1번 이동                           내 위치
train_compartments = ["기관실"] -> ["시멘트"] -> ["자갈"] -> ["밀가루"] -> ["우편"]

# 2번 이동                                      내 위치
train_compartments = ["기관실"] -> ["시멘트"] -> ["자갈"] -> ["밀가루"] -> ["우편"]

# 3번 이동                                                 내 위치
train_compartments = ["기관실"] -> ["시멘트"] -> ["자갈"] -> ["밀가루"] -> ["우편"]

# 4번 이동                                                             내 위치
train_compartments = ["기관실"] -> ["시멘트"] -> ["자갈"] -> ["밀가루"] -> ["우편"]


3. 클래스

>> 클래스는 분류. 집합. 같은 속성과 기능을 가진 객체를 총칭하는 개념

#객체
>> 객체는 세상에 존재하는 유일무이한 사물

예시

class Person:
    pass # 여기서 pass 는 안에 아무런 내용이 없다는 의미


person_1 = Person()
print(person_1)  # <__main__.Person object at 0x1090c76d0>
person_2 = Person()
print(person_2)  # <__main__.Person object at 0x1034354f0>

class Person:
    def __init__(self):
        print("hihihi", self)


person_1 = Person()  # hihihi <__main__.Person object at 0x1067e6d60> 

person_2 = Person()  # hihihi <__main__.Person object at 0x106851550> 

결론: 클래스를 이용하면 연관성 있는 데이들을 클래스 내에서관리할 수 있으며, 다양한 객체들을 
